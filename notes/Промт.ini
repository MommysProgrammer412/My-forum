ты играешь роль специалиста в вэб разработке, а я новичек без опыта. Я буду писать сайт представляющий из себя форум, для того чтобы получить свой первый опыт в разработке и закрепить знания на практике. Инструменты я буду использовать такие Роль: Ты - senior full-stack разработчик и опытный преподаватель, специализирующийся на Django и веб-разработке для начинающих.

Контекст:
Я - начинающий разработчик без коммерческого опыта. Для закрепления теории на практике я создаю свой первый проект: форум на Django. Мой стек: Python, Django, HTML, CSS, JavaScript, Bootstrap 5, SQLite. Мой приоритет - чистый, структурированный и поддерживаемый код, а не сложный дизайн.

Задача:
Создай детальный, пошаговый план-конспект разработки этого форума. План должен быть технически точным, логичным и последовательным. Исключи общие фразы и "воду", сосредоточься только на практических шагах.

Ключевые требования к плану:

    Последовательность: Шаги должны вытекать один из другого. Нельзя настраивать маршруты (urls.py) до создания представлений (views.py).

    Акцент на Модели и Шаблоны:

        Модели (Models): Все модели должны быть спроектированы и реализованы в самом начале, одной группой, чтобы избежать частых миграций.

        Шаблонизатор (Templates): Детализируй организацию шаблонов: наследование от base.html, использование {% include %} для повторяющихся элементов (хедер, футер, карточка поста), работа с контекстом.

    Структура проекта: Четко укажи, какие приложения (apps) создать (users, posts, core etc.) и какую функциональность в каждом инкапсулировать.

Функциональные требования к форуму:

    Аутентификация: Регистрация, вход/выход, смена пароля через почту, личный кабинет.

    Авторизация: Разделение прав доступа для аутентифицированных и анонимных пользователей.

    Посты: Создание (с прикреплением фото, видео, музыки, документов), редактирование, удаление (только автором).

    Лента: Главная страница с постами от пользователей, на которых подписан текущий юзер, включая его собственные.

    Социальные функции: Лайки (1 на пост от пользователя), комментарии, подписки на авторов.

    Дополнительно: Теги к постам, указание геолокации, аватарки пользователей.

Формат ответа:
Предоставь план в виде нумерованного списка этапов, где каждый этап разбит на конкретные технические задачи. Используй четкие формулировки, например: "1. Создай приложение users. 1.1. В models.py объяви модель CustomUser, унаследовав от AbstractUser...". Для моделей сразу укажи необходимые поля и связи.

Цель: Получить от тебя исчерпывающую дорожную карту, по которой я могу работать последовательно, не возвращаясь к переделке ранее написанного кода. 
Я мог что-то упустить, но так как это ты эксперт, тогда ты мне и подскажешь все верно или нет.
У меня уже есть что-то похожее на план, но он очень и очень долек от идеала. 

## 1. Базовая функциональность постов
   - **[ ]** Создание моделей:
     - Обновите модель `Post` для добавления полей, таких как `image` для загрузки изображений.
     - Создайте модель `Comment` для комментариев к постам.
   - **[ ]** Создайте и примените миграции.
   - **[ ]** Создайте функции для:
     - Создания постов.
     - Чтения (отображения) постов.
     - Обновления постов.
     - Удаления постов.

## 2. Разработка интерфейса
   - **[ ]** Создайте шаблоны для:
     - Отображения списка постов.
     - Отображения отдельного поста и его комментариев.
     - Формы для создания и редактирования поста.
   - **[ ]** Настройте маршруты для новых страниц.
   - **[ ]** Добавьте стили CSS для улучшения интерфейса.
   - **[ ]** Добавьте JavaScript для интерактивности (например, для AJAX-запросов).

## 3. Аутентификация и авторизация
   - **[ ]** Реализуйте регистрацию пользователей.
   - **[ ]** Реализуйте вход и выход пользователей.
   - **[ ]** Реализуйте функцию восстановления пароля.
   - **[ ]** Настройте разрешения (кто может создавать, редактировать и удалять посты).

## 4. Формы и валидация
   - **[ ]** Создайте формы Django для входа, регистрации и создания постов.
   - **[ ]** Реализуйте валидацию форм и обработку ошибок.

## 5. Добавление комментариев
   - **[ ]** Создайте систему для добавления комментариев к постам.
   - **[ ]** Обновите представления, чтобы выводить все комментарии для каждого поста.

## 6. Загрузка изображений
   - **[ ]** Обновите модель `Post`, чтобы поддерживать загрузку изображений.
   - **[ ]** Создайте интерфейс для загрузки изображений вместе с постами.
   - **[ ]** Добавьте поддержку отображения изображений в шаблонах.

--------------------------------------------------------------------------------------------------------------

Я - старший full-stack разработчик и опытный преподаватель, специализирующийся на Django и веб-разработке для начинающих. Я собираюсь создать детальный, пошаговый план разработки форума с использованием Django. План будет сосредоточен на практических шагах, избегая общих фраз и "воды." Основные требования к плану включают последовательность, акцент на модели и шаблоны, структуру проекта и функциональные требования к форуму.

Форум будет иметь аутентификацию, авторизацию, посты с вложениями, ленту постов от подписанных пользователей, социальные функции, такие как лайки и комментарии, а также дополнительные функции, такие как теги, геолокация и аватарки пользователей.

Вот план:

Настройка проекта и создание приложений 
1.1. Создай новый проект Django: django-admin startproject forum_project 
1.2. Создай следующие приложения: users, posts, core 
1.3. Добавь приложения в INSTALLED_APPS в settings.py.

Создание моделей 
2.1. В users/models.py, создай кастомную модель пользователя:
from django.contrib.auth.models import AbstractUser
from django.db import models

class CustomUser(AbstractUser):
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    bio = models.TextField(max_length=500, blank=True)
    location = models.CharField(max_length=30, blank=True)
2.2. В posts/models.py, создай следующие модели:
from django.db import models
from users.models import CustomUser

class Post(models.Model):
    author = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    photo = models.ImageField(upload_to='posts/photos/', null=True, blank=True)
    video = models.FileField(upload_to='posts/videos/', null=True, blank=True)
    music = models.FileField(upload_to='posts/music/', null=True, blank=True)
    document = models.FileField(upload_to='posts/documents/', null=True, blank=True)
    location = models.CharField(max_length=30, blank=True)

class Comment(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    author = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

class Like(models.Model):
    post = models.ForeignKey(Post, on_delete=models.CASCADE)
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

class Tag(models.Model):
    name = models.CharField(max_length=50, unique=True)
    posts = models.ManyToManyField(Post, related_name='tags')

class Follow(models.Model):
    follower = models.ForeignKey(CustomUser, related_name='following', on_delete=models.CASCADE)
    following = models.ForeignKey(CustomUser, related_name='followers', on_delete=models.CASCADE)
Структура шаблонов 3.1. Создай базовый шаблон templates/base.html с базовой HTML-структурой, CSS и JS. 3.2. Создай следующую структуру шаблонов:
templates/
├── base.html
├── includes/
│   ├── header.html
│   ├── footer.html
│   └── post_card.html
├── users/
│   ├── register.html
│   ├── login.html
│   ├── logout.html
│   ├── password_reset.html
│   └── profile.html
└── posts/
    ├── feed.html
    ├── create_post.html
    ├── post_detail.html
    └── edit_post.html
3.3. Используй наследование шаблонов и включаемые шаблоны, чтобы избежать дублирования кода.

Аутентификация и авторизация 4.1. В users/views.py, создай представления для регистрации, входа, выхода, сброса пароля и управления профилем. 4.2. Создай соответствующие шаблоны для каждого представления (см. структуру шаблонов выше). 4.3. Используй встроенные представления и формы аутентификации Django, где это возможно. 4.4. Реализуй авторизацию с помощью декораторов (@login_required) и миксинов (LoginRequiredMixin).

Функциональность постов 5.1. В posts/views.py, создай представления для создания, редактирования и удаления постов, а также для отображения ленты и отдельных постов. 5.2. Создай соответствующие шаблоны для каждого представления (см. структуру шаблонов выше). 5.3. Реализуй валидацию форм и обработку ошибок. 5.4. Реализуй обработку загрузки файлов для фото, видео, музыки и документов.

Социальные функции 6.1. В posts/views.py, создай представления для лайков постов, добавления комментариев и подписки на пользователей. 6.2. Обнови шаблон детали поста для отображения лайков, комментариев и кнопки подписки. 6.3. Реализуй AJAX-запросы для лайков и комментариев, чтобы улучшить пользовательский опыт.

Дополнительные функции 7.1. Реализуй теги, обновив представления создания и редактирования постов, а также шаблон детали поста. 7.2. Реализуй геолокацию, обновив модель поста и представления создания/редактирования. 7.3. Реализуй аватарки пользователей, обновив кастомную модель пользователя и представление профиля.

Маршруты и роутинг 8.1. В urls.py каждого приложения, определи URL-шаблоны для представлений, созданных на предыдущих шагах. 8.2. Включи URL каждого приложения в главный urls.py проекта.

Статические файлы и медиа 9.1. Настрой статические и медиа файлы в settings.py. 9.2. Создай директорию для статических файлов (CSS, JS, изображения). 9.3. Создай директорию для медиа файлов (загружаемые пользователем файлы).

Тестирование и деплой 10.1. Напиши тесты для моделей, представлений и форм. 10.2. Настрой параметры деплоя для продакшена (например, DEBUG=False, ALLOWED_HOSTS и т.д.). 10.3. Разверни проект на хостинг-провайдере (например, Heroku, PythonAnywhere и т.д.).

Этот план обеспечит последовательное и эффективное развитие вашего форума на Django, сосредоточившись на чистом, структурированном и поддерживаемом коде.